//
//
// MIT License
//
// Copyright (c) 2020 Stellacore Corporation.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject
// to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
// KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
// AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//


#ifndef periDetail_INCL_
#define periDetail_INCL_


#include <array>
#include <cmath>
#include <numeric>


// utilities
namespace peri
{
	//! Use to indicate invalid data values
	constexpr double sNan{ std::numeric_limits<double>::quiet_NaN() };

	//! Invalid triplet
	constexpr std::array<double, 3u> sNull{ sNan, sNan, sNan };

	//! Classic square operation (value times itself)
	template <typename Type>
	inline
	Type
	sq  // peri::
		( Type const & value
		)
	{
		return (value * value);
	}

	//! "Vector addition" for two std::array data types
	inline
	std::array<double, 3u>
	operator+  // peri::
		( std::array<double, 3u> const & valuesA
		, std::array<double, 3u> const & valuesB
		)
	{
		return
			{ valuesA[0] + valuesB[0]
			, valuesA[1] + valuesB[1]
			, valuesA[2] + valuesB[2]
			};
	}

	//! "Vector 'subtraction'" for two std::array data types
	inline
	std::array<double, 3u>
	operator-  // peri::
		( std::array<double, 3u> const & valuesA
		, std::array<double, 3u> const & valuesB
		)
	{
		return
			{ valuesA[0] - valuesB[0]
			, valuesA[1] - valuesB[1]
			, valuesA[2] - valuesB[2]
			};
	}

	//! Unitary negation
	inline
	std::array<double, 3u>
	operator-  // peri::
		( std::array<double, 3u> const & values
		)
	{
		return
			{ -values[0]
			, -values[1]
			, -values[2]
			};
	}

	//! "scalar-Vector" multiplication for two std::array data types
	inline
	std::array<double, 3u>
	operator*  // peri::
		( double const & scale
		, std::array<double, 3u> const & values
		)
	{
		return
			{ scale * values[0]
			, scale * values[1]
			, scale * values[2]
			};
	}

	//! Vector dot product of two arrays
	inline
	double
	dot  // peri::
		( std::array<double, 3u> const & vecA
		, std::array<double, 3u> const & vecB
		)
	{
		return std::inner_product
			( vecA.begin(), vecA.end()
			, vecB.begin(), 0.
			);
		/*
		// C++17 syntax
		return std::inner_product
			( std::cbegin(vecA), std::cend(vecA)
			, std::cbegin(vecB), 0.
			);
		*/
	}

	//! Squared magnitude of vec Sum of squared components
	inline
	double
	magSq  // peri::
		( XYZ const & vec
		)
	{
		return dot(vec, vec);
	}


	//! Magnitude of vec (square root of sum of squared components)
	inline
	double
	magnitude  // peri::
		( XYZ const & vec
		)
	{
		return std::sqrt(magSq(vec));
	}

	/*! \brief Unitary direction associated with non-zero orig
	 *
	 * \note Specialzied for non-zero orig vector. There is no check
	 * for zero magnitude inputs.
	 *
	 */
	inline
	std::array<double, 3u>
	unit  // peri::
		( std::array<double, 3u> const & orig
		)
	{
		return { (1./magnitude(orig)) * orig };
	}


} // [peri]

namespace peri
{
	/*! \brief Local vertical "up" unit direction at Lon/Par(Lat) location.
	 *
	 * Conventional definition with components interpreted as
	 * \arg [0] : component in equator positive toward lon=0, par=0
	 * \arg [1] : component dextrally orthogonal to [2],[0] components
	 * \arg [2] : component orthogonal to equator, positive to North pole
	 */
	inline
	XYZ
	upFromLpa  // peri::
		( LPA const & lpa //!< Only Lon,Par are used: Alt is ignored
		)
	{
		double const & lon = lpa[0];
		double const & par = lpa[1];
		return XYZ
			{ std::cos(par) * std::cos(lon)
			, std::cos(par) * std::sin(lon)
			, std::sin(par)
			};
	}


	/*! \brief Container for parameters describing oblate ellipsoidal shape.
	 *
	 * Represents an oblate spheroid of revolution generated by an ellipse
	 * rotated about its minor axis.
	 *
	 * Internal representation involves the semi-major axis, theRadA and
	 * semi-minor axis, theRadB assuming (theRadB <= theRadA). Interpretively
	 * theRadA is the "equatorial radius" and theRadB is the "polar radius".
	 * (The term "radius" is used as equivalent to "semi-axis").
	 *
	 * For geodetic applications, typical usage is to create an instance
	 * from equatorial radius and inverse (first) flattening factor via:
	 * \arg fromMajorInvFlat() - Create shape from common geodetic values
	 *
	 * \note There is nothing to prevent constructing instances with polar
	 * radius larger than equatorial one (i.e. a prolate ellipsoid) or by
	 * providing an negative inverse flattening factor. However, doing so
	 * is inconsistent with basic geodesy use-cases.
	 *
	 * Several data members provide values for derived parameter including:
	 * 
	 * Characteristic size:
	 * \arg #theLambda - The geometric mean of the two radii
	 *
	 * Shape coefficients useful in math expressions (ref doc/PerideticMath):
	 * \arg #theMuSqs - The squared radii values by index
	 *
	 * Data normalization:
	 * \arg normalizedShape() - Conforming shape with unit characteristic size
	 */
	struct Shape
	{
		//! Equatorial radius
		double const theRadA{ sNan };

		//! Polar radius
		double const theRadB{ sNan };

		//! Characteristic length (geometric mean: sqrt(theRadA*theRadB))
		double const theLambda{ sNan };

		//! Coefficients describing geometric shape (i.e. {a^2, a^2, b^2})
		std::array<double, 3u> const theMuSqs{ sNan, sNan, sNan };

	private:

		//! Value construction
		inline
		explicit
		Shape  // Shape::
			( double const & radA
				//!< Equatorial semi-axis magnitude
			, double const & radB
				//!< Polar semi-axis magnitude
			)
			: theRadA{ radA }
			, theRadB{ radB }
			, theLambda{ std::sqrt(theRadA * theRadB) }
			, theMuSqs{ sq(theRadA), sq(theRadA), sq(theRadB) }
		{ }

	public:

		//! Create an instance using the semi-major axis and inverse-Flattening
		static
		inline
		Shape
		fromMajorInvFlat  // Shape::
			( double const & equatorialRadius
				//!< Equatorial (semi-major) radius: for Earth~=6.378e6
			, double const & invFlatFactor
				//!< Inverse (first) flattening factor (aka 1/f): for Earth~=298
			)
		{
			double const & aa = equatorialRadius;
			double const ff{ 1. / invFlatFactor };
			double const bb{ (1.-ff) * aa };
			return Shape(aa, bb);
		}

		//! A null instance (nan data member values)
		Shape  // Shape::
			() = default;

		//! A shape conformal to this one but with unit characteristic length.
		inline
		Shape
		normalizedShape  // Shape::
			() const
		{
			double const normPerOrig{ 1. / theLambda };
			return Shape(normPerOrig*theRadA, normPerOrig*theRadB);
		}

	}; // Shape


	/*! \brief Merit function to evaluate altitude scaling closure.
	 *
	 * Provides evaluation of ellipsoidal constraint function and
	 * its derivatives (with respect to 'sigma' scale parameter).
	 */
	struct ShapeClosure
	{
		//! Parameters describing the underlying shape.
		Shape theShape{};

		//! Value construction.
		inline
		explicit
		ShapeClosure // ShapeClosure::
			( Shape const & shape
			)
			: theShape{ shape }
		{
		}

		//! Default creates a null instance (member values are NaN)
		ShapeClosure // ShapeClosure::
			() = default;

		//! Evaluate scalar function: psi = sum(q_k^2/mu_k)-1.
		inline
		double
		misclosureAt // ShapeClosure::
			( XYZ const & qVec
			) const
		{
			return
				{ sq(qVec[0]) / theShape.theMuSqs[0]
				+ sq(qVec[1]) / theShape.theMuSqs[1]
				+ sq(qVec[2]) / theShape.theMuSqs[2]
				- 1.
				};
		}

		/*! \brief Ellipsoid constraint function and derivative values.
		 *
		 * Elements are:
		 * \arg [0]: Function value - ellipsoid "misclosure"
		 * \arg [1]: First derivative (with respect to sigma)
		 *
		 */
		 // * \arg [2]: Second derivative (with respect to sigma)
		inline
		std::array<double, 2u>
		funcDerivs // ShapeClosure::
			( double const & sigma
			, XYZ const & qVec
			) const
		{
			std::array<double, 2u> fdfs;
			XYZ const invMuPlusSigmas
				{ 1. / (theShape.theMuSqs[0] + sigma)
				, 1. / (theShape.theMuSqs[1] + sigma)
				, 1. / (theShape.theMuSqs[2] + sigma)
				};
			XYZ const muqSqs
				{ theShape.theMuSqs[0] * sq(qVec[0])
				, theShape.theMuSqs[1] * sq(qVec[1])
				, theShape.theMuSqs[2] * sq(qVec[2])
				};
			// function value - for ellipsoid condition equation
			XYZ terms
				{ muqSqs[0] * sq(invMuPlusSigmas[0])
				, muqSqs[1] * sq(invMuPlusSigmas[1])
				, muqSqs[2] * sq(invMuPlusSigmas[2])
				};
			fdfs[0] = (terms[0] + terms[1] + terms[2]) - 1.;
			// first derivative - for ellipsoid condition equation
			terms[0] *= invMuPlusSigmas[0];
			terms[1] *= invMuPlusSigmas[1];
			terms[2] *= invMuPlusSigmas[2];
			fdfs[1] = -2.*(terms[0] + terms[1] + terms[2]);
			/*
			// second derivative - for ellipsoid condition equation
			terms[0] *= invMuPlusSigmas[0];
			terms[1] *= invMuPlusSigmas[1];
			terms[2] *= invMuPlusSigmas[2];
			fdfs[2] = 6.*(terms[0] + terms[1] + terms[2]);
			*/
			return fdfs;
		}

	}; // ShapeClosure


	/*! \brief Math description of ellipsoid surface (as a scalar field)
	 *
	 * Has members:
	 * \arg theShapeOrig - Shape parameters in orig units
	 * \arg theShapeNorm - Shape parameters in normalized units
	 *
	 * Characteristic size (used for normalization and restoration):
	 * \arg lambda() - Characteristic size parameter (forward from theShapeOrig)
	 *
	 * Provides: Data normalization/restoration functions:
	 * \arg xyzNormFrom - normalized vector (components near 1 in magnitude)
	 * \arg xyzOrigFrom - restored vector (components in physical units [m])
	 *
	 * Evaluations using normalized shape include:
	 * \arg gradientAt() - Vector gradient of shape field
	 *                     (proportional to ellipsoid normal vector)
	 *
	 * Employed notation includes:
	 * \arg xVec - an arbitrary point in space ('orig' physical units)
	 * \arg qVec - normalized expression for xVec ('norm' units near 1)
	 * \arg zVec - a point on surface of ellipsoid ('norm' units near 1)
	 */
	struct Ellipsoid
	{
		//! Original magnitude shape parameters
		Shape const theShapeOrig{};

		//! Normalized equivalent shape (1==theShapeNorm.theLambda())
		Shape const theShapeNorm{};

		//! A null instance
		Ellipsoid
			() = default;

		//! Value construction
		inline
		explicit
		Ellipsoid  // Ellipsoid::
			( Shape const & shapeOrig
			)
			: theShapeOrig{ shapeOrig }
			, theShapeNorm{ theShapeOrig.normalizedShape() }
		{ }

		//! Characteristic size (geometric mean of original shape semi-axes)
		inline
		double
		lambda  // Ellipsoid::
			() const
		{
			return theShapeOrig.theLambda;
		}

		//! Cartesian vector normalized to working dimensions
		inline
		XYZ
		xyzNormFrom  // Ellipsoid::
			( XYZ const & xVec
			) const
		{
			double const scl{ 1. / lambda() };
			return
				{ scl*xVec[0]
				, scl*xVec[1]
				, scl*xVec[2]
				};
		}

		//! Cartesian vector restored to original units
		inline
		XYZ
		xyzOrigFrom  // Ellipsoid::
			( XYZ const & xVec
			) const
		{
			double const scl{ lambda() };
			return
				{ scl*xVec[0]
				, scl*xVec[1]
				, scl*xVec[2]
				};
		}

		//! Algebraic (mis)closure relative to ellipsoid level surface
		inline
		XYZ
		gradientAt  // Ellipsoid::
			( XYZ const & zVec
				//!< A point **ON** ellipse (i.e. assumes 0==funcValueAt(zVec))
			) const
		{
			return
				{ 2. * zVec[0] / theShapeNorm.theMuSqs[0]
				, 2. * zVec[1] / theShapeNorm.theMuSqs[1]
				, 2. * zVec[2] / theShapeNorm.theMuSqs[2]
				};
		}

	}; // Ellipsoid


	/*! \brief Provide geodetic transforms at Earth scale (units of [m])
	 *
	 * Represents spatial configuration of Earth ellipsoidal shape
	 * and the relevant geometry in vicinity of its surface.
	 *
	 * Methods include:
	 * \arg lpaForXyz() - Geodetic coordinates from Cartesian
	 * \arg xyzForLpa() - Cartesian coordinates from Geodetic
	 */
	struct EarthModel
	{

		//! Geometric representation of surface
		Ellipsoid const theEllip{};

	private:

		//! Mathematical level condition associated with surface
		ShapeClosure const theMeritFunc{};

		// rotation rate, etc...
		// double theOmega{};

	public:

		//! A null instance
		EarthModel
			() = default;

		//! Construct to match physical geometry description
		inline
		explicit
		EarthModel  // Ellipsoid::
			( Shape const & shape
			)
			: theEllip(shape)
			, theMeritFunc(theEllip.theShapeNorm)
		{ }

		//! Geodetic coordinates associated with Cartesian coordinates xVec
		inline
		LPA
		lpaForXyz  // Ellipsoid::
			( XYZ const & xVec
			) const
		{
			// find point on ellipsoid closest to world point at xVec
			XYZ const pVec{ nearEllipsoidPointFor(xVec) };
			// extract LP(A=0.) for point on ellipsoid at pVec
			LPA const surfLPA{ lpaForSurfacePoint(pVec) };
			// compute altitude as directed distance from ellipsoid at pVec
			XYZ const grad{ theEllip.gradientAt(pVec) };
			XYZ const up{ unit(grad) };
			double const lambda{ theEllip.lambda() };
			double const alt{ dot((xVec - lambda*pVec), up) };
			// return value as combo of LP and A computed results
			return LPA{ surfLPA[0], surfLPA[1], alt };
		}

		//! Cartesian coordinates for geodetic location lpa
		inline
		XYZ
		xyzForLpa  // Ellipsoid::
			( LPA const & lpa
			) const
		{
			double const & alt = lpa[2];
			// determine vertical direction at LP location
			XYZ const up{ upFromLpa(lpa) };
			// compute scaling coefficient
			std::array<double, 3u> const & muSqs
				= theEllip.theShapeNorm.theMuSqs;
			double const sumMuUpSq // positive since all mu values are positive
				{ muSqs[0]*sq(up[0])
				+ muSqs[1]*sq(up[1])
				+ muSqs[2]*sq(up[2])
				};
			double const scl{ theEllip.lambda() / std::sqrt(sumMuUpSq) };
			// compute Cartesian location as displacement along normal dir
			return
				{ (scl*muSqs[0] + alt) * up[0]
				, (scl*muSqs[1] + alt) * up[1]
				, (scl*muSqs[2] + alt) * up[2]
				};
		}

		//! Perpendicular projection (pVec) from xVec onto ellipsoid
		inline
		XYZ
		nearEllipsoidPointFor  // Ellipsoid::
			( XYZ const & xVec
			) const
		{
			XYZ const qVec{ theEllip.xyzNormFrom(xVec) };
			double const sigma{ sigmaFor(qVec) };
			std::array<double, 3u> const & muSqs
				= theEllip.theShapeNorm.theMuSqs;
			return
				{ muSqs[0] * qVec[0] / (muSqs[0] + sigma)
				, muSqs[1] * qVec[1] / (muSqs[1] + sigma)
				, muSqs[2] * qVec[2] / (muSqs[2] + sigma)
				};
		}

	private:

		//! A linearly refined improvement to altitude scale factor currSigma
		inline
		double
		nextSigmaFor  // Ellipsoid::
			( double const & currSigma
			, XYZ const & qVec
			) const
		{
			// evaluate function and derivatives at expansion point
			double const & s0 = currSigma;
			std::array<double, 2u> const fdfs
				{ theMeritFunc.funcDerivs(s0, qVec) };
			// linear upate
			double const num{ fdfs[0] };
			double const den{ fdfs[1] };
			double const nextSigma{ s0 - num/den };
			return nextSigma;
		}

		//! Initial estimate for sigma factor (based on sphere approximation)
		inline
		double
		sigmaSphericalApprox  // Ellipsoid::
			( XYZ const & qVec
			) const
		{
			double const qMag{ std::sqrt(dot(qVec, qVec)) };
			return (qMag - 1.);
		}

		//! Refined altitude scale factor at normalized point location qVec
		inline
		double
		sigmaFor  // Ellipsoid::
			( XYZ const & qVec
			) const
		{
			// linearized iteration
			double sigma{ sigmaSphericalApprox(qVec) };
			double currTestVal{ 1. + sigma };
			// Convergence is very quick within operational range
			// e.g. 2 or 3 often sufficient in optimal domain
			constexpr std::size_t nnMax{ 8u };
			for (std::size_t nn{0u} ; nn < nnMax ; ++nn)
			{
				sigma = nextSigmaFor(sigma, qVec);
				double const nextTestVal{ 1. + sigma };
				// Tolerance suitable for 64-bit double type
				constexpr double tolDiff{ 1.e-15 };
				if (std::abs(currTestVal - nextTestVal) < tolDiff)
				{
					break;
				}
				currTestVal = nextTestVal;
			}
			return sigma;
		}

		//! Geodetic (Lon/Par) angles for point on ellipsoid surface (0==Alt).
		inline
		LPA
		lpaForSurfacePoint  // Ellipsoid::
			( XYZ const & zVec
			) const
		{
			XYZ const grad{ theEllip.gradientAt(zVec) };
			// familiar notation
			double const & xx = grad[0];
			double const & yy = grad[1];
			double const & zz = grad[2];
			// radius of parallel circle
			double const hh{ std::sqrt(sq(xx) + sq(yy)) };
			// compute conventional lon/par angles
			double lon{ 0. };
			if (! (0. == hh)) // if small hh, somewhat random longitude
			{
				lon = std::atan2(yy, xx);
			}
			double const par{ std::atan2(zz, hh) };
			// on surface, alt is identically 0
			constexpr double alt{ 0. };
			return LPA{ lon, par, alt };
		}

	}; // EarthModel


} // [peri]



// Definitions for functions
// #include "periDetail.inl"

#endif // periDetail_INCL_

