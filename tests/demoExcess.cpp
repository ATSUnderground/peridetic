//
//
// MIT License
//
// Copyright (c) 2020 Stellacore Corporation.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject
// to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
// KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
// AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//


#include "peridetic.h"

#include "periLocal.h"

#include <algorithm>
#include <fstream>
#include <iostream>
#include <utility>
#include <vector>


namespace peri::sim
{
	//! Geometric sampling relationships for uniformly space sampling
	struct SampleSpec
	{
		std::size_t const theNum{}; //!< \note MUST satisfy (1<theNum)
		std::pair<double, double> const theRange{};

		//! Number of samples generated by this spec
		inline
		std::size_t
		size
			() const
		{
			return theNum;
		}

		//! Increment producing number of samples spanning *CLOSED* range
		inline
		double
		delta
			() const
		{
			double const rangeMag{ theRange.second - theRange.first };
			double const delta{ (1./static_cast<double>(theNum-1)) * rangeMag };
			return delta;
		}

		//! The first value that is *IN*cluded - i.e. start of range
		inline
		double
		begin
			() const
		{
			return theRange.first;
		}

		//! The last value that is *IN*cluded - i.e. end of range
		inline
		double
		last
			() const
		{
			return theRange.second;
		}

		//! Value associated with sampling index (\note NO checking on ndx)
		inline
		double
		valueAtIndex
			( std::size_t const & ndx
			) const
		{
			return begin() + static_cast<double>(ndx) * delta();
		}

	}; // SampleSpec

	//! Collection of samples generated per specification
	inline
	std::vector<double>
	samplesFor
		( SampleSpec const & spec
		)
	{
		std::vector<double> samps;
		samps.reserve(spec.size());
		for (std::size_t ndx{0u} ; ndx < spec.size() ; ++ndx)
		{
			double const value{ spec.valueAtIndex(ndx) };
			samps.emplace_back(value);
		}
		return samps;
	}


	//! Collection of samples generated per specification
	struct Samples
	{
		std::vector<double> const theSamps{};

		inline
		static
		std::vector<double>
		samplesFor
			( SampleSpec const & spec
			)
		{
			std::vector<double> samps;
			samps.reserve(spec.size());
			for (std::size_t ndx{0u} ; spec.size() ; ++ndx)
			{
				double const value{ spec.valueAtIndex(ndx) };
				samps.emplace_back(value);
			}
			return samps;
		}

		//! Populate internal collection
		inline
		explicit
		Samples
			( SampleSpec const & spec
			)
			: theSamps{ samplesFor(spec) }
		{ }

	}; // Samples

	//! Samples covering meridian plane (spherically distributed)
	std::vector<XYZ>
	meridianPlaneSamples
		( SampleSpec const & radSpec
		, SampleSpec const & parSpec
		, double const & lonVal = .25*pi() 
			//!< generate plane at this longitude
		)
	{
		std::vector<XYZ> xyzs{};
		std::vector<double> const parVals{ samplesFor(parSpec) };
		std::vector<double> const radVals{ samplesFor(radSpec) };
		xyzs.reserve(parVals.size() * radVals.size());
		for (double const & parVal : parVals)
		{
			XYZ const xyzDir
				{ std::cos(parVal) * std::cos(lonVal)
				, std::cos(parVal) * std::sin(lonVal)
				, std::sin(parVal)
				};
			for (double const & radVal : radVals)
			{
				XYZ const xyz{ radVal * xyzDir };
				xyzs.emplace_back(xyz);
			}
		}
		return xyzs;
	}

} // [peri::sim]


namespace
{
	int
	test1
		( std::ostream & ostrm
		, peri::sim::SampleSpec const & radSpec
		, peri::sim::SampleSpec const & parSpec
		, peri::EarthModel const & earth
		, bool const & showSamples = false
		)
	{
		int errCount{ 0u };

		peri::Shape const & shape = earth.theEllip.theShapeOrig;

		using namespace  peri::sim;
		std::vector<peri::XYZ> const xyzs
			{ meridianPlaneSamples(radSpec, parSpec) };

		std::vector<double> extras{};
		extras.reserve(xyzs.size());
		for (peri::XYZ const & xyz : xyzs)
		{
			peri::XYZ const & xVec = xyz;
			peri::LPA const xLpa{ peri::lpaForXyz(xVec, earth) };
			double const & eta = xLpa[2];

			peri::XYZ const xDir{ peri::unit(xVec) };

			peri::LPA const pLpa{ xLpa[0], xLpa[1], 0. };
			peri::XYZ const pVec{ peri::xyzForLpa(pLpa, earth) };

			double const rMag{ peri::ellip::radiusToward(xDir, shape) };
			using peri::operator*;
			peri::XYZ const rVec{ rMag * xDir };

			using peri::operator-;
			peri::XYZ const xrVec{ xVec - rVec };
			peri::XYZ const xpVec{ xVec - pVec };

			double const xrMag{ peri::magnitude(xrVec) };
			double const xpMag{ peri::magnitude(xpVec) };

			double const extra{ xrMag - xpMag };
			extras.emplace_back(extra);

			// gradients
			peri::XYZ const gpVec{ shape.gradientAt(pVec) };
			double const gpMag{ peri::magnitude(gpVec) };
			peri::XYZ const grVec{ shape.gradientAt(rVec) };
			double const grMag{ peri::magnitude(grVec) };
			double const gRatio{ grMag / gpMag };
			double const rEps{ gRatio - 1. };
		//	peri::XYZ const gDifVec{ grVec - gpVec };
		//	double const gDifMag{ peri::magnitude(gDifVec) };

			// compute deltaEta, deltaSigma
			double const delEta{ xrMag - xpMag };
			double const dEtaPerR{ delEta / rMag };

			if (showSamples)
			{
				ostrm
				//	<< " xVec: " << peri::xyz::infoString(xVec)
				//	<< " xLpa: " << peri::lpa::infoString(xLpa)
			//		<< " Lon: " << peri::string::fixedAngular(xLpa[0])
					<< " Par: " << peri::string::fixedAngular(xLpa[1])
					<< " Alt: " << peri::string::allDigits(eta)
				//	<< " " << peri::string::fixedLinear(xrMag, "xrMag")
				//	<< " " << peri::string::fixedLinear(xpMag, "xpMag")
					<< " " << peri::string::fixedLinear(extra, "extra")
					<< " " << peri::string::allDigits(rEps, "rEps")
					<< " " << peri::string::allDigits(delEta, "delEta")
					<< " " << peri::string::allDigits(dEtaPerR, "dEtaPerR")
					<< std::endl;
			}
		}

		if (! extras.empty())
		{
			std::sort(extras.begin(), extras.end());
			using peri::string::fixedLinear;
			ostrm << "# minExcess: " << fixedLinear(extras.front()) << '\n';
			ostrm << "# maxExcess: " << fixedLinear(extras.back()) << '\n';
		}

++errCount;
		return errCount;
	}

/*
std::ofstream sOfsExact("zetaExact.dat");
std::ofstream sOfsApprox1("zetaApprox1.dat");
std::ofstream sOfsApprox2("zetaApprox2.dat");
std::ofstream sOfsApprox3("zetaApprox3.dat");
*/
std::ofstream ofsDifPVec("pvecDiff.dat");

	//! Evaluate math equations for ellipsoidal excess at this point
	int
	checkXYZ
		( peri::XYZ const & xVecExp
		, peri::EarthModel const & earth
		)
	{
		using namespace peri;

		Shape const & shape = earth.theEllip.theShapeOrig;

		// radial point on ellipsoid
		double const rhoExp{ peri::ellip::radiusToward(xVecExp, shape) };
		XYZ const rVecExp{ rhoExp * unit(xVecExp) };

		// gradient at radial point
		XYZ const grVecExp{ shape.gradientAt(rVecExp) };
		double const grMagExp{ magnitude(grVecExp) };

		// TODO(name?) fraction components
		using Array = std::array<double, 3u>;
		Array const & muSqs = shape.theMuSqs;
		Array const fgkFwds
			{ (2./muSqs[0]) / grMagExp
			, (2./muSqs[1]) / grMagExp
			, (2./muSqs[2]) / grMagExp
			};
		Array const fgkInvs{ 1./fgkFwds[0], 1./fgkFwds[1], 1./fgkFwds[2] };

		// radial pseudo-altitude
		double const eta0{ magnitude(xVecExp - rVecExp) };

		Array const s1ks
			{ 1. / (fgkInvs[0] + eta0)
			, 1. / (fgkInvs[1] + eta0)
			, 1. / (fgkInvs[2] + eta0)
			};
		Array const n1ks
			{ s1ks[0] * xVecExp[0] * fgkInvs[0]
			, s1ks[1] * xVecExp[1] * fgkInvs[1]
			, s1ks[2] * xVecExp[2] * fgkInvs[2]
			};

		double coA{ 0. };
		double coB{ 0. };
		double coC{ 0. };
		for (std::size_t kk{0u} ; kk < 3u ; ++kk)
		{
			double const nPerMuSq{ sq(n1ks[kk]) / muSqs[kk] };
			coA += nPerMuSq * sq(s1ks[kk]);
			coB += nPerMuSq * s1ks[kk];
			coC += nPerMuSq;
		}
		coA *= 3.;
		coC -= 1.;

		double const xArg{ (coA * coC) / sq(coB) };
	//	double const radical{ std::sqrt(1. - xArg) };
	//	double const zetaExact{ (coB / coA) * (1. - radical) };

		// approximations
		double const fracCoB{ coC / coB };
		// first order approximation
	//	double const zetaApx1
	//		{ fracCoB * (1./2.) };
		// second order approximation
		double const zetaApx2
			{ fracCoB * (1./2. + (1./8.)*xArg) };
	//	double const zetaApx3
	//		{ (.5 * fracCoB) * (1. + ((1./4.) + (1./8.)*xArg)*xArg) };

		double const & zetaGot = zetaApx2;

		/*
		sOfsExact << string::allDigits(zetaExact, "zetaExact") << '\n';
		sOfsApprox1 << string::allDigits(zetaApx1, "zetaApx1") << '\n';
		sOfsApprox2 << string::allDigits(zetaApx2, "zetaApx2") << '\n';
		sOfsApprox3 << string::allDigits(zetaApx3, "zetaApx3") << '\n';

		std::cout
			<< string::allDigits(coA, "coA")
			<< " "
			<< string::allDigits(coB, "coB")
			<< " "
			<< string::allDigits(coC, "coC")
			<< " "
			<< string::allDigits(coA*coC, "A*C")
			<< std::endl;
		std::cout
			<< string::allDigits(zetaExact, "zetaExact")
			<< " "
			<< string::allDigits(zetaApx1, "zetaApx1")
			<< " "
			<< string::allDigits(zetaApx2, "zetaApx2")
			<< std::endl;
		*/

		Array const pkSqGots
			{ sq(n1ks[0]) / sq(1. + zetaGot*s1ks[0])
			, sq(n1ks[1]) / sq(1. + zetaGot*s1ks[1])
			, sq(n1ks[2]) / sq(1. + zetaGot*s1ks[2])
			};
		double const fConGot
			{ pkSqGots[0] / muSqs[0]
			+ pkSqGots[1] / muSqs[1]
			+ pkSqGots[2] / muSqs[2]
			- 1.
			};

		double const quadExp{ 0. };
		double const quadGot{ coA*zetaGot*zetaGot -2.*coB*zetaGot + coC };

		double const egGot{ (zetaGot + eta0) / grMagExp };

		XYZ const pVecGot
			{ xVecExp[0] / (1. + 2. * (egGot/muSqs[0]))
			, xVecExp[1] / (1. + 2. * (egGot/muSqs[1]))
			, xVecExp[2] / (1. + 2. * (egGot/muSqs[2]))
			};


		// Quantities for checking values
		LPA const xLpaExp{ lpaForXyz(xVecExp, earth) };
		double const & etaExp = xLpaExp[2];
		XYZ const pLpaExp{ xLpaExp[0], xLpaExp[1], 0. };
		XYZ const pVecExp{ xyzForLpa(pLpaExp, earth) };
		XYZ const uVecExp{ upFromLpa(xLpaExp) };
		Array const pkSqExps{ sq(pVecExp[0]), sq(pVecExp[1]), sq(pVecExp[2]) };

		XYZ const gpVecExp{ shape.gradientAt(pVecExp) };
		double const gpMagExp{ magnitude(gpVecExp) };
		double const rEps{ (grMagExp / gpMagExp) - 1. };

		double const deltaExp{ eta0 - etaExp };

		XYZ const pVecDif{ pVecGot - pVecExp };
		double const zetaExp{ eta0*rEps - deltaExp - deltaExp*rEps };
		double const zetaDif{ zetaGot - zetaExp };
		double const egExp{ etaExp / grMagExp };
		double const egDif{ egGot - egExp };
		double const egFrac{ egDif / egExp };
		double const pMagDif{ magnitude(pVecDif) };

		double const fConExp
			{ pkSqExps[0] / muSqs[0]
			+ pkSqExps[1] / muSqs[1]
			+ pkSqExps[2] / muSqs[2]
			- 1.
			};

		// peri::Shape const & shape = earth.theEllip.theShapeOrig;
		std::cout << std::endl;
		std::cout << string::fixedLinear(etaExp, "etaExp") << std::endl;
		std::cout << xyz::infoString(xVecExp, "xVecExp") << std::endl;
		std::cout << lpa::infoString(xLpaExp, "xLpaExp") << std::endl;
		std::cout << xyz::infoString(uVecExp, "uVecExp") << std::endl;
		std::cout << string::allDigits(rEps, "rEps") << std::endl;
		std::cout << string::allDigits(etaExp, "etaExp") << std::endl;
		std::cout << string::allDigits(eta0, "eta0") << std::endl;
		std::cout << string::allDigits(deltaExp, "deltaExp") << std::endl;
		std::cout << xyz::infoString(pkSqExps, "pkSqExps") << std::endl;
		std::cout << xyz::infoString(pkSqGots, "pkSqGots") << std::endl;
		std::cout << xyz::infoString(s1ks, "s1ks") << std::endl;
		std::cout << xyz::infoString(n1ks, "n1ks") << std::endl;
		std::cout << string::allDigits(fConExp, "fConExp") << std::endl;
		std::cout << string::allDigits(fConGot, "fConGot") << std::endl;
		std::cout << string::allDigits(quadExp, "quadExp") << std::endl;
		std::cout << string::allDigits(quadGot, "quadGot") << std::endl;
		std::cout << string::allDigits(zetaExp, "zetaExp") << std::endl;
		std::cout << string::allDigits(zetaGot, "zetaGot") << std::endl;
		std::cout << string::allDigits(zetaDif, "zetaDif") << std::endl;
		std::cout << string::allDigits(egExp, "egExp") << std::endl;
		std::cout << string::allDigits(egGot, "egGot") << std::endl;
		std::cout << string::allDigits(egDif, "egDif") << std::endl;
		std::cout << string::allDigits(egFrac, "egFrac") << std::endl;
		std::cout << string::allDigits(pVecExp, "pVecExp") << std::endl;
		std::cout << string::allDigits(pVecGot, "pVecGot") << std::endl;
		std::cout << string::allDigits(pVecDif, "pVecDif") << std::endl;
		ofsDifPVec
			<< lpa::infoString(xLpaExp, "xLpaExp")
			<< " "
			<< xyz::infoString(pVecDif, "pVecDif")
			<< " "
			<< string::allDigits(pMagDif, "pMagDif")
			<< std::endl;
		return 0;
	}

	//! Check equations on sampling of points
	int
	test2
		( peri::sim::SampleSpec const & radSpec
		, peri::sim::SampleSpec const & parSpec
		, peri::EarthModel const & earth
		)
	{
		int errCount{ 0u };

		using namespace  peri::sim;
		std::vector<peri::XYZ> const xyzs
			{ meridianPlaneSamples(radSpec, parSpec) };
//errCount += checkXYZ(xyzs[5], earth);
		for (peri::XYZ const & xyz : xyzs)
		{
			errCount += checkXYZ(xyz, earth);
		}
		/*
		*/
		return errCount;

	}

} // [annon]


//! TODO
int
main
	()
{
	int errCount{ 0 };

//	std::ofstream ofs("/dev/stdout");
std::ofstream ofs("/dev/null");

	constexpr std::size_t numRad{ 33u };
	constexpr std::size_t numPar{ 33u };
//#define UseNorm
#if defined(UseNorm)
	peri::Shape const shape(peri::shape::sWGS84.normalizedShape());
	constexpr double altLo{ -(100./6370.) };
	constexpr double altHi{  (100./6370.) };
#else
	peri::Shape const shape(peri::shape::sWGS84);
	constexpr double altLo{ -100.e+3 };
	constexpr double altHi{  100.e+3 };
#endif

	peri::EarthModel const earth(shape);
	peri::Ellipsoid const & ellip = earth.theEllip;

	double const radEarth{ ellip.lambda() };
	double const radMin{ radEarth + altLo };
	double const radMax{ radEarth + altHi };
	using Range = std::pair<double, double>;
	peri::sim::SampleSpec const radSpec{ numRad, Range{ radMin, radMax } };
	peri::sim::SampleSpec const parSpec{ numPar, Range{ 0.,  .5*peri::pi()} };

	errCount += test1(ofs, radSpec, parSpec, earth, true);
	std::cout << '\n';
	errCount += test2(radSpec, parSpec, earth);
	std::cout << '\n';

	return errCount;
}

