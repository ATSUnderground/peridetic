//
//
// MIT License
//
// Copyright (c) 2020 Stellacore Corporation.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject
// to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
// KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
// AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//


#include "peridetic.h"

#include "periLocal.h"

#include <algorithm>
#include <fstream>
#include <iostream>
#include <utility>
#include <vector>


namespace peri::sim
{
	//! Geometric sampling relationships for uniformly space sampling
	struct SampleSpec
	{
		std::size_t const theNum{}; //!< \note MUST satisfy (1<theNum)
		std::pair<double, double> const theRange{};

		//! Number of samples generated by this spec
		inline
		std::size_t
		size
			() const
		{
			return theNum;
		}

		//! Increment producing number of samples spanning *CLOSED* range
		inline
		double
		delta
			() const
		{
			double const rangeMag{ theRange.second - theRange.first };
			double const delta{ (1./static_cast<double>(theNum-1)) * rangeMag };
			return delta;
		}

		//! The first value that is *IN*cluded - i.e. start of range
		inline
		double
		begin
			() const
		{
			return theRange.first;
		}

		//! The last value that is *IN*cluded - i.e. end of range
		inline
		double
		last
			() const
		{
			return theRange.second;
		}

		//! Value associated with sampling index (\note NO checking on ndx)
		inline
		double
		valueAtIndex
			( std::size_t const & ndx
			) const
		{
			return begin() + static_cast<double>(ndx) * delta();
		}

	}; // SampleSpec

	//! Collection of samples generated per specification
	inline
	std::vector<double>
	samplesFor
		( SampleSpec const & spec
		)
	{
		std::vector<double> samps;
		samps.reserve(spec.size());
		for (std::size_t ndx{0u} ; ndx < spec.size() ; ++ndx)
		{
			double const value{ spec.valueAtIndex(ndx) };
			samps.emplace_back(value);
		}
		return samps;
	}


	//! Collection of samples generated per specification
	struct Samples
	{
		std::vector<double> const theSamps{};

		inline
		static
		std::vector<double>
		samplesFor
			( SampleSpec const & spec
			)
		{
			std::vector<double> samps;
			samps.reserve(spec.size());
			for (std::size_t ndx{0u} ; spec.size() ; ++ndx)
			{
				double const value{ spec.valueAtIndex(ndx) };
				samps.emplace_back(value);
			}
			return samps;
		}

		//! Populate internal collection
		inline
		explicit
		Samples
			( SampleSpec const & spec
			)
			: theSamps{ samplesFor(spec) }
		{ }

	}; // Samples

	//! Samples covering meridian plane (spherically distributed)
	std::vector<XYZ>
	merdianPlaneSamples
		( SampleSpec const & radSpec
		, SampleSpec const & parSpec
		, double const & lonVal = .25*pi() 
			//!< generate plane at this longitude
		)
	{
		std::vector<XYZ> xyzs{};
		std::vector<double> const parVals{ samplesFor(parSpec) };
		std::vector<double> const radVals{ samplesFor(radSpec) };
		xyzs.reserve(parVals.size() * radVals.size());
		for (double const & parVal : parVals)
		{
			XYZ const xyzDir
				{ std::cos(parVal) * std::cos(lonVal)
				, std::cos(parVal) * std::sin(lonVal)
				, std::sin(parVal)
				};
			for (double const & radVal : radVals)
			{
				XYZ const xyz{ radVal * xyzDir };
				xyzs.emplace_back(xyz);
			}
		}
		return xyzs;
	}

} // [peri::sim]


namespace
{
	int
	test1
		( std::ostream & ostrm
		, peri::sim::SampleSpec const & radSpec
		, peri::sim::SampleSpec const & parSpec
		, bool const & showSamples = false
		)
	{
		int errCount{ 0u };

		peri::EarthModel const earth{ peri::model::WGS84 };
		peri::Shape const & shape = earth.theEllip.theShapeOrig;

		using namespace  peri::sim;
		std::vector<peri::XYZ> const xyzs
			{ merdianPlaneSamples(radSpec, parSpec) };

		std::vector<double> extras{};
		extras.reserve(xyzs.size());
		for (peri::XYZ const & xyz : xyzs)
		{
			peri::XYZ const & xVec = xyz;
			peri::LPA const xLpa{ peri::lpaForXyz(xVec) };
			double const & eta = xLpa[2];

			peri::XYZ const xDir{ peri::unit(xVec) };

			peri::LPA const pLpa{ xLpa[0], xLpa[1], 0. };
			peri::XYZ const pVec{ peri::xyzForLpa(pLpa) };

			double const rMag{ peri::ellip::radiusToward(xDir, shape) };
			using peri::operator*;
			peri::XYZ const rVec{ rMag * xDir };

			using peri::operator-;
			peri::XYZ const xrVec{ xVec - rVec };
			peri::XYZ const xpVec{ xVec - pVec };

			double const xrMag{ peri::magnitude(xrVec) };
			double const xpMag{ peri::magnitude(xpVec) };

			double const extra{ xrMag - xpMag };
			extras.emplace_back(extra);

			// gradients
			peri::XYZ const gpVec{ shape.gradientAt(pVec) };
			double const gpMag{ peri::magnitude(gpVec) };
			peri::XYZ const grVec{ shape.gradientAt(rVec) };
			//double const grMag{ peri::magnitude(grVec) };
			//double const gRatio{ grMag / gpMag };
			peri::XYZ const gDifVec{ grVec - gpVec };
			double const gDifMag{ peri::magnitude(gDifVec) };

			// compute deltaEta, deltaSigma
			double const delEta{ xrMag - xpMag };
			double const delSig{ (2./gpMag) * delEta };

			if (showSamples)
			{
				ostrm
				//	<< " xVec: " << peri::xyz::infoString(xVec)
				//	<< " xLpa: " << peri::lpa::infoString(xLpa)
			//		<< " Lon: " << peri::string::fixedAngular(xLpa[0])
					<< " Par: " << peri::string::fixedAngular(xLpa[1])
					<< " Alt: " << peri::string::allDigits(eta)
				//	<< " " << peri::string::fixedLinear(xrMag, "xrMag")
				//	<< " " << peri::string::fixedLinear(xpMag, "xpMag")
					<< " " << peri::string::fixedLinear(extra, "extra")
					<< " " << peri::string::allDigits(gDifMag, "gDifMag")
					<< " " << peri::string::allDigits(delEta, "delEta")
					<< " " << peri::string::allDigits(delSig, "delSig")
					<< std::endl;
			}
		}

		if (! extras.empty())
		{
			std::sort(extras.begin(), extras.end());
			using peri::string::fixedLinear;
			ostrm << "# minExcess: " << fixedLinear(extras.front()) << '\n';
			ostrm << "# maxExcess: " << fixedLinear(extras.back()) << '\n';
		}

++errCount;
		return errCount;
	}

} // [annon]


//! TODO
int
main
	()
{
	int errCount{ 0 };

	std::ofstream ofs("/dev/stdout");

	double const radEarth{ peri::Ellipsoid(peri::shape::sWGS84).lambda() };
	double const radMin{ radEarth - 100.e+3 };
	double const radMax{ radEarth + 100.e+3 };
	using Range = std::pair<double, double>;
	peri::sim::SampleSpec const radSpec{ 3u, Range{ radMin, radMax } };
	peri::sim::SampleSpec const parSpec{ 5u, Range{ 0.,  .5*peri::pi()} };

	errCount += test1(ofs, radSpec, parSpec, true);
	return errCount;
}

