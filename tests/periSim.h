//
//
// MIT License
//
// Copyright (c) 2020 Stellacore Corporation.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject
// to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
// KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
// AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//


#ifndef peri_Sim_INCL_
#define peri_Sim_INCL_


#include "peridetic.h"

#include <cmath>
#include <cstdint>
#include <utility>
#include <vector>


namespace peri::sim
{
	//! Geometric sampling relationships for uniformly space sampling
	struct SampleSpec
	{
		std::size_t const theNumSamps{};
		std::pair<double, double> const theRange{};
		double theDelta{};

		//! Increment producing number of samples spanning *CLOSED* range
		inline
		static
		double
		deltaFor
			( std::size_t const & numSamps
			, std::pair<double, double> const & range
			)
		{
			double const rangeMag{ range.second - range.first };
			double delta{ 0. }; // case for only one sample
			if (1u < numSamps)
			{
				delta = (1./static_cast<double>(numSamps-1)) * rangeMag;
			}
			return delta;
		}

		//! Compute spacing associated with requested sampling
		inline
		explicit
		SampleSpec
			( std::size_t const & numSamps
			, std::pair<double, double> const & range
			)
			: theNumSamps{ numSamps }
			, theRange{ range }
			, theDelta{ deltaFor(theNumSamps, theRange) }
		{ }

		//! Number of samples generated by this spec
		inline
		std::size_t
		size
			() const
		{
			return theNumSamps;
		}

		//! Increment producing number of samples spanning *CLOSED* range
		inline
		double
		delta
			() const
		{
			return theDelta;
		}

		//! The first value that is *IN*cluded - i.e. start of range
		inline
		double
		first
			() const
		{
			return theRange.first;
		}

		//! The last value that is *IN*cluded - i.e. end of range
		inline
		double
		last
			() const
		{
			return theRange.second;
		}

		//! Value associated with sampling index (\note NO checking on ndx)
		inline
		double
		valueAtIndex
			( std::size_t const & ndx
			) const
		{
			return first() + static_cast<double>(ndx) * delta();
		}

	}; // SampleSpec

	inline
	static
	std::vector<double>
	samplesPer
		( SampleSpec const & spec
		)
	{
		std::vector<double> samps;
		samps.reserve(spec.size());
		for (std::size_t ndx{0u} ; ndx < spec.size() ; ++ndx)
		{
			double const value{ spec.valueAtIndex(ndx) };
			samps.emplace_back(value);
		}
		return samps;
	}

	//! Samples covering meridian plane (spherically distributed)
	std::vector<XYZ>
	meridianPlaneSamples
		( SampleSpec const & radSpec
		, SampleSpec const & parSpec
		, double const & lonVal = .25*pi() 
			//!< generate plane at this longitude
		)
	{
		std::vector<XYZ> xyzs{};
		std::vector<double> const parVals{ samplesPer(parSpec) };
		std::vector<double> const radVals{ samplesPer(radSpec) };
		xyzs.reserve(parVals.size() * radVals.size());
		for (double const & parVal : parVals)
		{
			XYZ const xyzDir
				{ std::cos(parVal) * std::cos(lonVal)
				, std::cos(parVal) * std::sin(lonVal)
				, std::sin(parVal)
				};
			for (double const & radVal : radVals)
			{
				XYZ const xyz{ radVal * xyzDir };
				xyzs.emplace_back(xyz);
			}
		}
		return xyzs;
	}

} // [peri::sim]

#endif // peri_Sim_INCL_
